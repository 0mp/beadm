#!/bin/sh -e

# Copyright (c) 2012 Slawomir Wojciech Wojtczak (vermaden). All rights reserved.
# Copyright (c) 2012 Bryan Drewery (bdrewery). All rights reserved.
# Copyright (c) 2012 Mike Clarke (rawthey). All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 'AS IS' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

unset LC_ALL
unset LANG
PATH=${PATH}:/bin:/usr/bin:/sbin:/usr/sbin

if [ $( uname -r | cut -d '.' -f1 ) -lt 8 ]
then
  echo "ERROR: beadm works on FreeBSD 8.0 or later"
  exit 1
fi

__usage() {
  local NAME=${0##*/}
  echo "usage:"
  echo "  ${NAME} activate beName"
  echo "  ${NAME} create [-e nonActiveBe] beName"
  echo "  ${NAME} create [-e beName@snapshot] beName"
  echo "  ${NAME} create beName@snapshot"
  echo "  ${NAME} destroy [-F] beName"
  echo "  ${NAME} destroy [-F] beName@snapshot"
  echo "  ${NAME} list"
  echo "  ${NAME} mount"
  echo "  ${NAME} mount beName [mountpoint]"
  echo "  ${NAME} umount [-f] beName"
  echo "  ${NAME} unmount [-f] beName"
  echo "  ${NAME} rename origBeName newBeName"
  exit 1
}

# check if boot environment exists
__be_exist() { # 1=DATASET
  if ! zfs list -H -o name ${1} 1> /dev/null 2> /dev/null
  then
    echo "ERROR: Boot environment '${1##*/}' does not exist"
    exit 1
  fi
}

# check if argument is a snapshot
__be_snapshot() { # 1=DATASET/SNAPSHOT
  echo "${1}" | grep -q "@" 2> /dev/null
}

# check if boot environment is mounted
__be_mounted() { # 1=BE
  mount 2> /dev/null | grep -q -E "^${1} " 2> /dev/null
}

# create new boot environment
__be_new() { # 1=SOURCE 2=TARGET
  local SOURCE=$( echo ${1} | cut -d '@' -f 1 )
  if __be_snapshot ${1}
  then
    local SNAPSHOT=$( echo ${1} | cut -d '@' -f 2 )
    zfs list -r -H -t filesystem -o name ${SOURCE} \
      | while read FS
        do
          if ! zfs list -H -o name ${FS}@${SNAPSHOT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Child snapshot '${FS}@${SNAPSHOT}' does not exist"
            exit 1
          fi
        done
  else
    if zfs list -H -o name ${1}@${2##*/} 1> /dev/null 2> /dev/null
    then
      echo "ERROR: Snapshot '${1}@${2##*/}' already exists"
      exit 1
    fi
    FMT=$( date "+%Y-%m-%d-%H:%M:%S" )
    if ! zfs snapshot -r ${1}@${FMT} 1> /dev/null 2> /dev/null      # 2##*/ > FMT
    then
      echo "ERROR: Cannot create snapshot '${1}@${FMT}'"            # 2##*/ > FMT
      exit 1
    fi
  fi
  zfs list -H -o name -r ${SOURCE} \
    | while read FS
      do
        local OPTS=""
        while read NAME PROPERTY VALUE
        do
          local OPTS="-o ${PROPERTY}=${VALUE} ${OPTS}"
        done << EOF
$( zfs get -o name,property,value -s local,received -H all ${FS} | awk '!/[\t ]canmount[\t ]/' )
EOF
        DATASET=$( echo ${FS} | awk '{print $1}' | sed -E s/"^${POOL}\/ROOT\/${SOURCE##*/}"/"${POOL}\/ROOT\/${2##*/}"/g )
        if [ "${OPTS}" = "-o = " ]
        then
          local OPTS=""
        fi
        if __be_snapshot ${1}
        then
          zfs clone -o canmount=off ${OPTS} ${FS}@${1##*@} ${DATASET}
        else
          zfs clone -o canmount=off ${OPTS} ${FS}@${FMT} ${DATASET} # 2##*/ > FMT
        fi
      done
}

ROOTFS=$( mount | awk '/ \/ / {print $1}' )

if echo ${ROOTFS} | grep -q -m 1 -E "^/dev/"
then
  echo "ERROR: This system does not boot from ZFS pool"
  exit 1
fi

POOL=$( echo ${ROOTFS} | awk -F '/' '{print $1}' )

if ! zfs list ${POOL}/ROOT 1> /dev/null 2> /dev/null
then
  echo "ERROR: This system is not configured for boot environments"
  exit 1
fi

BOOTFS=$( zpool list -H -o bootfs ${POOL} )

case ${1} in

  (list) # --------------------------------------------------------------------
    if [ ${#} -ne 1 ]
    then
      __usage
    fi
    BENAME_STARTS_WITH="${POOL}/ROOT"
    LIST=$( zfs list -o name,mountpoint,creation -s creation -H -d 1 -r ${POOL}/ROOT | grep -E "^${POOL}/ROOT/" )
    WIDTH_CREATION=$( echo "${LIST}" | awk '{print $5}' | wc -L )
    WIDTH_NAME=$( echo "${LIST}" | awk '{print $1}' | wc -L )
    WIDTH_NAME=$(( ${WIDTH_NAME} - ${#BENAME_STARTS_WITH} - 1 ))
    printf "%-${WIDTH_NAME}s %-6s %-10s %6s %6s %s\n" \
      BE Active Mountpoint Space Policy Created
    # shell strips out line breaks from the command output so we add ~ to
    # end of each line for use as a record separator later by AWK. The ~
    # is not a valid character for use in zfs components so it is not
    # likely to cause problems by appearing anywhere else in the output
    USED_ALL=$( zfs list -H -t all -o name,origin,used -r ${POOL}/ROOT \
                  | sed 1d \
                  | sed '/0$/d;s/K$/ 1/;s/M$/ 1024/;s/G$/ 1048576/;s/T$/ 1073741824/;s/P$/ 1099511627776/;s/E$/ 1125899906842624/;s/Z$/ 1152921504606846976/' \
                  | sed 's/$/~/' )
    echo "${LIST}" \
      | while read NAME MOUNTPOINT Y m d H M
        do
          TOTAL=0
          NAME=${NAME##*/}
          ACTIVE=''
          if [ "${BENAME_STARTS_WITH}/${NAME}" = "${ROOTFS}" ]
          then
            ACTIVE="${ACTIVE}N"
            fi
          if [ "${BENAME_STARTS_WITH}/${NAME}" = "${BOOTFS}" ]
          then
            ACTIVE="${ACTIVE}R"
          fi
          if [ -z "${ACTIVE}" ]
          then
            ACTIVE="-"
          fi
          case ${ACTIVE} in
            (N|NR) MOUNT="/" ;;
            (*)    MOUNT="-" ;;
          esac
          # get the name of origin snapshot for boot environment
          SNAPSHOT=$( zfs list -H -t all -o name,origin sys/ROOT/${NAME} | awk -F '@' '{print $2}' )
          # calculate space total usage for boot environment
          TOTAL=$( echo ${USED_ALL} \
                     | awk -v RS=~ -v match1="^${POOL}\/ROOT\/${NAME}"'(([@/]+.*)|$)' -v match2="@${SNAPSHOT}$" \
                       'BEGIN {total=0}
                        ($1 ~ match1) || ($1 ~ match2) {total += $3 * $4}
                        END {
                             if (total <= 1024)                  {                                      unit = "K"; }
                        else if (total <= 1048576)               { total = total / 1024;                unit = "M"; }
                        else if (total <= 1073741824)            { total = total / 1048576;             unit = "G"; }
                        else if (total <= 1099511627776)         { total = total / 1073741824;          unit = "T"; }
                        else if (total <= 1125899906842624)      { total = total / 1099511627776;       unit = "P"; }
                        else if (total <= 1152921504606846976)   { total = total / 1125899906842624;    unit = "E"; }
                                                            else { total = total / 1152921504606846976; unit = "Z"; }
                        printf ("%.1f%s",total,unit);
                        }' )
          printf "%-${WIDTH_NAME}s %-6s %-10s %6s %-6s " ${NAME} ${ACTIVE} ${MOUNT} ${TOTAL} "static"
          date -j -f "%a %b %d %H:%M %Y" "${Y} ${m} ${d} ${H} ${M}" +"%Y-%m-%d %H:%M"
        done
    ;;

  (create) # ------------------------------------------------------------------
    case ${#} in
      (4)
        if ! [ ${2} = "-e" ]
        then
          __usage
        fi
        __be_exist ${POOL}/ROOT/${3}
        if zfs list -H -o name ${POOL}/ROOT/${4} 1> /dev/null 2> /dev/null
        then
          echo "ERROR: Boot environment '${4}' already exists"
          exit 1
        fi
        __be_new ${POOL}/ROOT/${3} ${POOL}/ROOT/${4}
        ;;
      (2)
        if __be_snapshot ${2}
        then
          if ! zfs snapshot -r ${POOL}/ROOT/${2} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot create '${2}' recursive snapshot"
            exit 1
          fi
        else
          __be_new ${ROOTFS} ${POOL}/ROOT/${2}
        fi
        ;;
      (*)
        __usage
        ;;
    esac
    echo "Created successfully"
    ;;

  (activate) # ----------------------------------------------------------------
    if [ ${#} -ne 2 ]
    then
      __usage
    fi
    __be_exist ${POOL}/ROOT/${2}
    if [ "${BOOTFS}" = "${POOL}/ROOT/${2}" ]
    then
      echo "Already activated"
      exit 0
    else
      if mount | grep -E "^${POOL}/ROOT/${2} " 1> /dev/null 2> /dev/null
      then
        MNT=$( mount | grep -E "^${POOL}/ROOT/${2} " | awk '{print $3}' )
        if [ "${MNT}" != "/" ]
        then
          echo "ERROR: Boot environment '${2}' is mounted at '${MNT}'"
          echo "ERROR: Cannot activate mounted boot environment"
          exit 1
        fi
      fi
      if [ "${ROOTFS}" != "${POOL}/ROOT/${2}" ]
      then
        TMPMNT="/tmp/BE"
        if ! mkdir -p ${TMPMNT}
        then
          echo "ERROR: Cannot create '${TMPMNT}' directory"
          exit 1
        fi
        MOUNT=0
        while read FS MNT
        do
          if [ "${FS}" = "${POOL}/ROOT/${2}" ]
          then
            MOUNT=${MNT}
          fi
        done << EOF
$( mount -p | awk '{print $1 " " $2}' )
EOF
        if [ ${MOUNT} -eq 0 ]
        then
          zfs set canmount=noauto ${POOL}/ROOT/${2}
          zfs set mountpoint=${TMPMNT} ${POOL}/ROOT/${2}
          zfs mount ${POOL}/ROOT/${2} 1> /dev/null 2> /dev/null
        else
          TMPMNT=${MOUNT}
        fi
        cp /boot/zfs/zpool.cache ${TMPMNT}/boot/zfs/zpool.cache
        LOADER_CONFIGS=${TMPMNT}/boot/loader.conf
        if [ -f ${TMPMNT}/boot/loader.conf.local ]
        then
          LOADER_CONFIGS="${LOADER_CONFIGS} ${TMPMNT}/boot/loader.conf.local"
          fi
        sed -i '' -E s/"^vfs.root.mountfrom=.*$"/"vfs.root.mountfrom=\"zfs:${POOL}\/ROOT\/${2##*/}\""/g ${LOADER_CONFIGS} 2> /dev/null
        if [ ${MOUNT} -eq 0 ]
        then
          zfs umount ${POOL}/ROOT/${2}
          zfs set mountpoint=legacy ${POOL}/ROOT/${2}
        fi
      fi
      if ! zpool set bootfs=${POOL}/ROOT/${2} ${POOL} 2> /dev/null
      then
        echo "ERROR: Failed to activate '${2}'"
        exit 1
      fi
    fi
    # disable automatic mount on all inactive datasets
    zfs list -H -o name -r ${POOL}/ROOT \
      | grep -v "${POOL}/ROOT/${2}" \
      | while read I
        do
          zfs set canmount=noauto ${I}
        done
    # enable automatic mount for active boot environment and promote it
    zfs list -H -o name,origin -t filesystem -r ${POOL}/ROOT/${2} \
      | while read I ORIGIN
        do
          zfs set canmount=on ${I}
          if [ ${ORIGIN} != "-" ]
          then
            zfs promote ${I}
          fi
        done
    echo "Activated successfully"
    ;;

  (destroy) # -----------------------------------------------------------------
    case ${#} in
      (2)
        echo "Are you sure you want to destroy '${2}'?"
        echo -n "This action cannot be undone (y/[n]): "
        read CHOICE
        DESTROY=${2}
        ;;
      (3)
        if [ "${2}" != "-F" ]
        then
          __usage
        fi
        CHOICE=Y
        DESTROY=${3}
        ;;
      (*)
        __usage
        ;;
    esac
    __be_exist ${POOL}/ROOT/${DESTROY}
    if [ "${BOOTFS}" = "${POOL}/ROOT/${DESTROY}" ]
    then
      echo "ERROR: Cannot destroy active boot environment"
      exit 1
    fi
    case ${CHOICE} in
      (Y|y|[Yy][Ee][Ss])
        # delete snapshot or delete boot environment
        if __be_snapshot ${POOL}/ROOT/${DESTROY}
        then
          # destroy desired snapshot
          if ! zfs destroy -r ${POOL}/ROOT/${DESTROY} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Snapshot '${2}' is origin for other boot environment"
            exit 1
          fi
        else
          # promote clones dependent on snapshots used by destroyed boot environment
          zfs list -H -t all -o name,origin \
            | while read NAME ORIGIN
              do
                if echo "${ORIGIN}" | grep -q -E "${POOL}/ROOT/${DESTROY}(/.*@|@)" 2> /dev/null
                then
                  zfs promote ${NAME}
                fi
              done
          # get origins used by destroyed boot environment
          ORIGIN_SNAPSHOTS=$( zfs list -H -t all -o origin -r ${POOL}/ROOT/${DESTROY} | grep -v '^-$' | awk -F "@" '{print $2}' | sort -u )
          # destroy boot environment
          zfs destroy -r ${POOL}/ROOT/${DESTROY}
          # promote datasets dependent on origins used by destroyed boot environment
          ALL_ORIGINS=$( zfs list -H -t all -o name,origin )
          echo "${ORIGIN_SNAPSHOTS}" \
            | while read S
              do
                echo "${ALL_ORIRINS}" \
                  | grep "${S}" \
                  | awk '{print $1}' \
                  | while read I
                    do
                      zfs promote ${I}
                    done
              done
          # destroy origins used by destroyed boot environment
          SNAPSHOTS=$( zfs list -H -t snapshot -o name )
          echo "${ORIGIN_SNAPSHOTS}" \
            | while read S
              do
                echo "${SNAPSHOTS}" \
                  | grep "@${S}$" \
                  | while read I
                    do
                      zfs destroy ${I}
                    done
              done
        fi
        echo "Destroyed successfully"
        ;;
      (*)
        echo "Boot environment '${DESTROY}' has not been destroyed"
        ;;
    esac
    ;;

  (rename) # ------------------------------------------------------------------
    if [ ${#} -ne 3 ]
    then
      __usage
    fi
    __be_exist ${POOL}/ROOT/${2}
    if [ "${BOOTFS}" = "${POOL}/ROOT/${2}" ]
    then
      echo "ERROR: Renaming active boot environment is not supported"
      exit 1
    fi
    if zfs list -H -o name ${POOL}/ROOT/${3} 2> /dev/null
    then
      echo "ERROR: Boot environment '${3}' already exists"
      exit 1
    fi
    zfs rename ${POOL}/ROOT/${2} ${POOL}/ROOT/${3}
    echo "Renamed successfully"
    ;;

  (mount) # -------------------------------------------------------------------
    if [ ${#} -eq 1 ]
    then
      zfs list -H -o name -d 1 -r ${POOL}/ROOT \
        | grep "${POOL}/ROOT/" \
        | while read NAME
          do
            NAME=${NAME##*/}
            if mount | grep -q -E "^${POOL}/ROOT/${NAME}" 2> /dev/null
            then
              echo ${NAME}
              mount \
                | grep -E "^${POOL}/ROOT/${NAME}" \
                | awk '{print $1 " " $3}' \
                | column -t \
                | awk '{print "  " $0}'
              echo
            fi
          done
      exit 0
    elif [ ${#} -eq 2 ]
    then
      TARGET=$( mktemp -d /tmp/tmp.XXXXXX )
    elif [ ${#} -eq 3 ]
    then
      TARGET=${3}
    else
      __usage
    fi
    __be_exist "${POOL}/ROOT/${2}"
    if __be_mounted "${POOL}/ROOT/${2}"
    then
      MNT=$( mount | grep -E "^${POOL}/ROOT/${2} " | awk '{print $3}' )
      echo "Boot environment '${2}' is already mounted at '${MNT}'"
      exit 1
    fi
    if ! mkdir -p ${TARGET} 2> /dev/null
    then
      echo "ERROR: Cannot create '${TARGET}' mountpoint"
      exit 1
    fi
    if ! mount -t zfs ${POOL}/ROOT/${2} ${TARGET}
    then
      echo "ERROR: Cannot mount '${2}' at '${TARGET}' mountpoint"
      exit 1
    fi
    PREFIX=$( echo ${POOL}/ROOT/${2}/ | sed 's/\//\\\//g' )
    zfs list -H -o name,mountpoint -r ${POOL}/ROOT/${2} \
      | grep -v "legacy$" \
      | sort -n \
      | grep -E "^${POOL}/ROOT/${2}/" \
      | while read FS MOUNTPOINT
        do
          if [ "{FS}" != "${POOL}/ROOT/${2}" ]
          then
            INHERIT=$( zfs get -H -o source mountpoint ${FS} )
            if [ "${INHERIT}" = "local" ]
            then
              if [ "${MOUNTPOINT}" = "legacy" ]
              then
                continue
              else
                MOUNTPOINT="/$( echo "${FS}" | sed s/"${PREFIX}"//g )"
              fi
            fi
          fi
          if ! mkdir -p ${TARGET}${MOUNTPOINT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot create '${TARGET}${MOUNTPOINT}' mountpoint"
            exit 1
          fi
          if ! mount -t zfs ${FS} ${TARGET}${MOUNTPOINT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot mount '${FS}' at '${TARGET}${MOUNTPOINT}' mountpoint"
            exit 1
          fi
        done
    echo "Mounted successfully on '${TARGET}'"
    ;;

  (umount|unmount) # ----------------------------------------------------------
    if [ ${#} -eq 2 ]
    then
      # we need this empty section for argument checking
      :
    elif [ ${#} -eq 3 -a "${2}" = "-f" ]
    then
      OPTS="-f"
      shift
    else
      __usage
    fi
    __be_exist "${POOL}/ROOT/${2}"
    if ! __be_mounted "${POOL}/ROOT/${2}"
    then
      echo "Boot environment '${2}' is not mounted"
      exit 1
    fi
    mount \
      | grep "^${POOL}/ROOT/${2}" \
      | awk '{print $1}' \
      | sort -n -r \
      | while read FS
        do
          if ! umount ${OPTS} ${FS} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot umount '${FS}' dataset"
            exit 1
          fi
        done
    echo "Unmounted successfully"
    ;;

  (*) # -----------------------------------------------------------------------
    __usage
    ;;

esac
